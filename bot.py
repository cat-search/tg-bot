import logging
import os

import httpx
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup, 
    ReplyKeyboardRemove,
    Update,
    )
from telegram.ext import (
    Application, 
    CommandHandler,
    ContextTypes,
    ConversationHandler, 
    CallbackQueryHandler,
    MessageHandler,
    filters,
    )
from telegram.constants import ChatAction
from telegram.error import InvalidToken

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv('BOT_TOKEN', '')
FASTAPI_URL = os.getenv('BOT_FASTAPI_URL', '')  # URL FastAPI —Å–µ—Ä–≤–µ—Ä–∞

START, QUESTION, CONTINUE = range(3)

start_keyboard = ReplyKeyboardMarkup(
    [["–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"]],
    resize_keyboard=True,
    one_time_keyboard=True,
)


continue_keyboard = ReplyKeyboardMarkup(
    [["–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", "–ó–∞–≤–µ—Ä—à–∏—Ç—å"]],
    resize_keyboard=True,
    one_time_keyboard=True,
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ FastAPI
async def fetch_answer(question: str) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ FastAPI
    
    –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
    {  
        'query_id': 'dd1d1f58-0190-4264-91c8-33a798f762f6', 
        'query_text': '–∫—Ç–æ —Ç–∞–∫–∞—è –Ω—ç–Ω—Å–∏', 
        'timestamp': '2025-04-19T14:57:21.362012+00:00', 
        'vectordb_doc_count': 5, 
        'vdb_latency': 0.06935114902444184, 
        'llm_latency': 103.62458060507197, 
        'latency': 103.687061, 
        'response_text': "According to the context, Nancy is not explicitly mentioned as a specific character in the story..."
    }
    
    """
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(
                FASTAPI_URL,
                params={"query_text": question},
                timeout=300.0,
            )
            if response.status_code == 200:
                response_obj = response.json()
                logger.info(f"Backend Answer: {response_obj}")
                return response_obj
        except httpx.RequestError:
            return "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É."

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"User {update.effective_user.id} started the conversation.")
    
    text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç CatSearch –∏ —è –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π! –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–∏ÃÜ—Ç–∏ –æ—Ç–≤–µ—Ç. –î–ª—è –æ—Ç–º–µ–Ω—ã –¥–∏–∞–ª–æ–≥–∞ –Ω–∞–∂–º–∏—Ç–µ /cancel. –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:"
    examples_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ß—Ç–æ —Ç—ã –∑–Ω–∞–µ—à—å –ø—Ä–æ –ù—ç–Ω—Å–∏?", callback_data="sample_1")],
        [InlineKeyboardButton("–ù–∞–∑–æ–≤–∏ –ª—É—á—à–∏–µ —ç–∫—Å–ø–æ–Ω–∞—Ç—ã –õ—É–≤—Ä–∞!", callback_data="sample_2")],
        [InlineKeyboardButton("–ö—Ç–æ —Å–æ–≤–µ—Ä—à–∏–ª —Ö–ª–∞–¥–Ω–æ–∫—Ä–æ–≤–Ω–æ–µ —É–±–∏–π—Å—Ç–≤–æ?", callback_data="sample_3")],
    ])
    await update.message.reply_text(text, reply_markup=examples_keyboard)
    return QUESTION


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
async def handle_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Backend Answer: {
        'query_id': '65141426-71fb-49e8-9cc4-a458af66d7ed', 
        'query_text': '–ù–∞–∑–æ–≤–∏ –ª—É—á—à–∏–µ —ç–∫—Å–ø–æ–Ω–∞—Ç—ã –õ—É–≤—Ä–∞\\!', 
        'timestamp': '2025-04-21T16:35:54.416034+00:00', 
        'vectordb_doc_count': 5, 
        'vdb_latency': 0.08878185499634128, 
        'llm_latency': 0.995448645997385, 
        'latency': 1.08455, 
        'response_text': '–õ—É—á—à–∏–µ —ç–∫—Å–ø–æ–Ω–∞—Ç—ã –õ—É–≤—Ä–∞ –≤–∫–ª—é—á–∞—é—Ç –≤ —Å–µ–±—è —Ç–∞–∫–∏–µ —à–µ–¥–µ–≤—Ä—ã, –∫–∞–∫ ¬´–ú–æ–Ω–∞ –õ–∏–∑–∞¬ª –õ–µ–æ–Ω–∞—Ä–¥–æ –¥–∞ –í–∏–Ω—á–∏ –∏ ¬´–í–µ–Ω–µ—Ä–∞ –ú–∏–ª–æ—Å—Å–∫–∞—è¬ª. –¢–∞–∫–∂–µ —Å—Ç–æ–∏—Ç —É–ø–æ–º—è–Ω—É—Ç—å –æ–≥—Ä–æ–º–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π –¥—Ä–µ–≤–Ω–µ–≥–æ –ï–≥–∏–ø—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ —Å–∞–º—ã—Ö –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –≤ –º–∏—Ä–µ.'
        }
    """

    question: str = ''
    if update and update.message:
        question = update.message.text
        logger.info(f"User {update.effective_user.id} asked: {question}")
    else:
        question = context.user_data['current_question']

    await context.bot.send_chat_action(
        chat_id=update.effective_chat.id, 
        action=ChatAction.TYPING
    )
    await update.message.reply_text(f"üîç –ò—â—É –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: \t*{question}*", parse_mode="MarkdownV2")

    await context.bot.send_chat_action(
        chat_id=update.effective_chat.id, 
        action=ChatAction.TYPING
    )

    answer: dict = await fetch_answer(question)

    await context.bot.send_message(
        chat_id=update.effective_chat.id, 
        text=f"ü§ñ –û—Ç–≤–µ—Ç: \n\n" + answer.get("response_text")
        )
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id, 
        parse_mode="MarkdownV2",
        text=f"""
    `–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:`
    `query_id: {answer.get("query_id")}`
    `query_text: {answer.get("query_text")}`
    `timestamp: {answer.get("timestamp")}`
    `vectordb_doc_count: {answer.get("vectordb_doc_count")}`
    `vdb_latency: {answer.get("vdb_latency"):.2f}`
    `llm_latency: {answer.get("llm_latency"):.2f}`
    `latency: {answer.get("latency")}`
        """)
        

    await context.bot.send_message(
        chat_id=update.effective_chat.id, 
        text="ü§ñ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å!", 
        )

    return QUESTION

async def handle_sample_questions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Backend Answer: {
        'query_id': '65141426-71fb-49e8-9cc4-a458af66d7ed', 
        'query_text': '–ù–∞–∑–æ–≤–∏ –ª—É—á—à–∏–µ —ç–∫—Å–ø–æ–Ω–∞—Ç—ã –õ—É–≤—Ä–∞\\!', 
        'timestamp': '2025-04-21T16:35:54.416034+00:00', 
        'vectordb_doc_count': 5, 
        'vdb_latency': 0.08878185499634128, 
        'llm_latency': 0.995448645997385, 
        'latency': 1.08455, 
        'response_text': '–õ—É—á—à–∏–µ —ç–∫—Å–ø–æ–Ω–∞—Ç—ã –õ—É–≤—Ä–∞ –≤–∫–ª—é—á–∞—é—Ç –≤ —Å–µ–±—è —Ç–∞–∫–∏–µ —à–µ–¥–µ–≤—Ä—ã, –∫–∞–∫ ¬´–ú–æ–Ω–∞ –õ–∏–∑–∞¬ª –õ–µ–æ–Ω–∞—Ä–¥–æ –¥–∞ –í–∏–Ω—á–∏ –∏ ¬´–í–µ–Ω–µ—Ä–∞ –ú–∏–ª–æ—Å—Å–∫–∞—è¬ª. –¢–∞–∫–∂–µ —Å—Ç–æ–∏—Ç —É–ø–æ–º—è–Ω—É—Ç—å –æ–≥—Ä–æ–º–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π –¥—Ä–µ–≤–Ω–µ–≥–æ –ï–≥–∏–ø—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ —Å–∞–º—ã—Ö –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –≤ –º–∏—Ä–µ.'
        }
    """


    query = update.callback_query
    await query.answer()

    sample_questions = {
        "sample_1": "–ß—Ç–æ —Ç—ã –∑–Ω–∞–µ—à—å –ø—Ä–æ –ù—ç–Ω—Å–∏?",
        "sample_2": "–ù–∞–∑–æ–≤–∏ –ª—É—á—à–∏–µ —ç–∫—Å–ø–æ–Ω–∞—Ç—ã –õ—É–≤—Ä–∞",
        "sample_3": "–ö—Ç–æ —Å–æ–≤–µ—Ä—à–∏–ª —Ö–ª–∞–¥–Ω–æ–∫—Ä–æ–≤–Ω–æ–µ —É–±–∏–π—Å—Ç–≤–æ?"
    }
    question = sample_questions.get(query.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å")

    context.user_data['current_question'] = question  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ

    await query.edit_message_text(f"üîç –ò—â—É –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:\t*{question}*", parse_mode="MarkdownV2")

    answer: dict = await fetch_answer(question)

    await context.bot.send_message(
        chat_id=update.effective_chat.id, 
        text=f"ü§ñ –û—Ç–≤–µ—Ç: \n\n" + answer.get("response_text")
        )
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id, 
        parse_mode="MarkdownV2",
        text=f"""
    `–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:`
    `query_id: {answer.get("query_id")}`
    `query_text: {answer.get("query_text")}`
    `timestamp: {answer.get("timestamp")}`
    `vectordb_doc_count: {answer.get("vectordb_doc_count")}`
    `vdb_latency: {answer.get("vdb_latency"):.2f}`
    `llm_latency: {answer.get("llm_latency"):.2f}`
    `latency: {answer.get("latency")}`
        """)
        

    await context.bot.send_message(
        chat_id=update.effective_chat.id, 
        text="ü§ñ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å!", 
        )

    return QUESTION


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è (–Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ)
async def continue_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    if choice == "–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
            reply_markup=ReplyKeyboardRemove(),
        )
        return QUESTION
    elif choice == "–ó–∞–≤–µ—Ä—à–∏—Ç—å":
        await update.message.reply_text(
            "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=ReplyKeyboardRemove(),
        )
        return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        reply_markup=ReplyKeyboardRemove(),
    )
    return ConversationHandler.END

def main():
    try:
        app = Application.builder().token(BOT_TOKEN).build()
    except InvalidToken:
        logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN.")
        exit(1)

    # ConversationHandler –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–º
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            QUESTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question),
                CallbackQueryHandler(handle_sample_questions, pattern="^sample_"),  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤
                CallbackQueryHandler(cancel, pattern="^cancel"),
                CommandHandler("start", start),
            ],
            CONTINUE: [
                MessageHandler(filters.Regex("^–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å$"), continue_conversation),
                MessageHandler(filters.Regex("^–ó–∞–≤–µ—Ä—à–∏—Ç—å$"), cancel),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    logger.info("Bot started")

    app.run_polling()

if __name__ == "__main__":
    main()